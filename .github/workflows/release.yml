---
# Copyright Â© 2021-2024 Matt Robinson
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Release
on:
  release:
    types:
      - published

permissions:
  contents: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: adopt
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate release bundle
        run: ./gradlew assembleRelease

      - name: Sign release apk
        run: |
          apksigner=$(find "$ANDROID_SDK_ROOT/build-tools/" -name apksigner | \
              sort -r | head -n1)
          cp app/build/outputs/apk/release/app-release{-unsigned,}.apk
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d > release.p12
          $apksigner sign -ks release.p12 \
              --ks-pass pass:'${{ secrets.RELEASE_KEYSTORE_PASSWORD }}' \
              app/build/outputs/apk/release/app-release.apk
          rm release.p12

      - name: Upload signed apk as release asset
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')

            await github.rest.repos.uploadReleaseAsset({
              headers: {
                "content-type": "application/vnd.android.package-archive",
              },
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              data: fs.readFileSync(
                "app/build/outputs/apk/release/app-release.apk"),
              name: "com.nerdoftheherd.tasker.rsync_" +
                context.payload.release.tag_name + ".apk",
            })

      - name: Trigger website update
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PUBLISH_NOTH_PAT }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'nerdoftheherd.com',
              workflow_id: 'publish.yml',
              ref: 'master'
            })
